modularability ability reuse parts program later another program sometimes completely different goals program also makes easier debug code dividing code classes specific job program fails one job one class debug good security purposes allows let someone use program sorts lists without give access source code also allows use inheritance polymorphism
type programming flexible making easier add modify program also type fail safe program check individual module eliminates redundant code makes program easier read programmers debugging program easier track source problem within module rather 2 million line program
main advantages object oriented programming existing classes reused program maintenance verification easier
advantages oop allows us build classes objects three principles make oop encapsulation objects combine data operations inheritance classes inherit properties classes polymorphism objects determine appropriate operations execution time
advantages existing classes reused program maintenance verification easier accomplish
object oriented programming allows programmers use object classes changed manipulated affecting entire object classes all hold attrubutes affect object
reusable components extensibility maintainability reduces large problems smaller manageable problems
encapsulation objects combine data operations inheritance classes inherit properties classes polymorphism objects determine appropriate operations execution time
easier debugg reusability
usability ease maintenance
one main advantages hide inner details technique known encapsulation objects combine data operations cannot see works another advantage reuse classes defined earlier program method known inheritance finally another advantage objects determine appropriate operations execution time technique known polymorphism
existing classes reused program maintenance verification easier
using different modules allows easier debugging
data encapsulation concept use functions methods manipulate data
modular reusable code allowing faster deployment solutions general view solution
coding debugging programs usually easier either compiler specify object working incorrectly function object assigned easier identify code also looks organized easier read help avoid redundant coding post programming maintenance also easier also modules reused several times programs without much hassle abstraction art breaking one big problem smaller simpler problems solving many smaller problems shared unique complex problems creating modules solve smaller repeated problems save time encounter
variables remain private code easily modified reusable well easily implemented mention easier read follow along observer
data abstraction control possible isolate elements elements lot easier prevent tampering data
encapsulation objects use operations without knowing operation works inheritance cuts redundancy reusing earlier classes polymorphism objects select correct operation use situation
make easier reuse adapt previously written code separate complex programs smaller easier understand classes
existing classes reused program maintenance verification easier
existing classes feused program maintenance verification easier
main advantages object oriented programming data abstraction easier maintenance usability
existing classes reused program maintenance verifications easy
