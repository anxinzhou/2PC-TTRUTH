two parts pointer item least constrained fix size memory fall preferred node list takes based
increase limited decrease needed size stack preferred create list based
prevents push array operation adding item size reached list much stack simpler base write fixed limit based
array faster easier keep track complexity less code based
use array size would fixed list based like
max array better want know size fixed linked usually set list
size flexablity allows stack list based
limited stacks lists preferred set number elements linked implementing
1 big implementation preferred list since efficient based
iteration moved way implementation preferred without along linked list
determined size list
scalable linked memory less takes list
head dynamically easily node grown list accessible based
nodes easier traversed list work based
space design due nearly processing overhead linked list lower based unlimited
array dynamically size shrink fixed list grow unlike based
needed lists shrink full become list grow arrays based
one size reasons preferred implentation main fixed bases list
array space allocated dynamically implementation extra preferred store based time linked requires takes list pointers
makes easier memory preferred number elements link limit pushing list
implement therefore easier much allows implementation stack preferred scale list necessary based
array resizeable waste size memory list implementation storage time less requires inceasing based
increase array however decrease want determine size would stack pre need list based
array flexible implementation preferred list based
