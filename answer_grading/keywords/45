take twice much memory node
doubly linked list pointers set mechanics inserting deleting difficult also special cases beginning end list complicated
pointers set mechanics inserting deleting doubly linked list bit involved singly linked list
insertion deletion doubly linked list involved singly linked list leaving room error complex algorithms
need memory store previous pointers
node doubly linked list takes memory node singly linked list
keep consider predecessor successor connections inserting deleting
node requires extra node requires memory difficult insert remove individual nodes
double linked lists require space per node elementary operations expensive
difficult delete create nodes
use memory make 2 pointers update 2 pointers time change list
nodes take memory
node requires extra pointer space requirements increased insertion deletion node takes longer pointer operations
little confusing special cases end beginning become difficult
increased actions add remove elements linked list
inserting deleting double linked list involved special cases beginning end
main disadvanate hard remove all items list
node requires extra pointer taking storage insertions deletions require pointer operations
doubly linked list twice many pointers element therefore memory used
process adding removing nodes doubly linked list complex basic linked list
double linked lists require space per node elementary operation expensive
1 node requires extra pointer requiring space 2 insertion deletion node takes bit longer pointer operations
takes twice storage needed
using pointers enable backward movement takes memory pointers make slightly work add remove node list
