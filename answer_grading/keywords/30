run time sorting program n 2 best case list already sorted worst case list sorted reverse
insertion sort n performs n 1 operations best case scenario list array already sorted
number operations insertions sort best case n n 1 2 best case insertion sort sorted list runs n
best case would n n 1 takes scan array make one swap array would sorted would take 1 operation
best case 1 worst case n
n operations n number elements array best case all elements already sorted
n
best case all elements sorted n 1
best case scenario insertion sort all elements array already sorted cause loop iterate x times x number elements array loop never iterate resulting insertion sort require x operations
1 operation best case scenario already sorted one comparision
n operations n number items
n 1
n list already sorted
insertion sort take n 1 operations array reverse order
best case scenario already sorted list insertion sort progress list number operations directly proportional number elements list also noted n big notation
1 list two ints one must moved
best case n worst case n factorial
n 1 best case array already sorted
worst case n time best case n 2 time
n
n number times n equals number elements list best case scenario elements list already sorted
best case scenario insertion sort list already sorted number operations would number elements
insertion sort make zero operations length 1 comparisons best case scenario array given already order
theta n best case senario everything already sorted
