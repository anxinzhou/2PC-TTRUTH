try several sets data algorithm includes worst case best case random cases also try run program different computer specs
answered
time complexity using big logarthmic log n linear n exponential n 2 quadratic n k k gt 1 polynomial n n gt 1
using sort counting principle number operations performed algorithm
experimental means would actually write prototype algorithm measure time takes run given certain parameters
measuring relationship running algorithm different input sizes
oposite theoretical assessment algorithm determine runtime run code first determine runtime recommended limited test include all possibilities data hardware used process data
answered
experimental approach measuring running time using big equation tells running time
create run algorithm multiple times measuring amount time takes average results
keep value many operations takes add value time function called
big oh
running program various input data measuring running time system time
run program different data sizes like 10 x increase x measure completion speeds program find patterns attempt measure running time important keep software hardware however makes experimental testing inferior theoretical eyes
run program see many times thing called runtime function based
number times specific segments get called per unit work
every call memory add multiply equation type n
adding time marker algorithm called another time marker immediately change time calculate efficiency speed computers cpu
big h notation
experimental approach measures actual running time seconds
running algorithm specific set data
experimental terms running time algorithm measured number operations required complete function number usually expressed big notation
run code n times get average values drop constant lowest number example f x 3n 1 running time bef f x n
measure actual time program run calculate running time using input operations done
